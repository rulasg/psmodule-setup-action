name: 'Powershell Module Setup'
author: 'rulasg'
description: 'Setup a powershell module for later use on the workflow Job.'
branding:
  icon: "package"
  color: "orange"
inputs:
  Name:
    description: 'Name of the module to setup'
    required: true
  Version:
    description: 'Specifies which version of the module to use.'
    required: false
  AllowPreReleaseVersions:
    description: 'Allow the use of prerelease version of the module'
    default: 'true'
    required: false
#     AllowedSkippedTests:
#       description: 'Allow to use PreRelease versions of the module'
#       required: false
#     AllowedSkippedTests:
#       description: 'Allow tests to be skipped without failing'
#       required: false
#     AllowedNotImplementedTests:
#       description: 'Allow tests to be skipped without failing'
#       required: false
runs:
  using: "composite"
  steps:
    - name: Setup the module
      env:
        InputName: ${{ inputs.Name }}
        InputVersion: ${{ inputs.Version }}
        InputAllowPreReleaseVersions: ${{ inputs.AllowPreReleaseVersions }}
      shell: pwsh
      run: |

        $AllowPrerelease = ($env:InputAllowPreReleaseVersions -eq 'true')
        $Version = $env:InputVersion
        $Name = $env:InputName

        function Import-MyModule{
          [CmdletBinding()]
          param (
              [Parameter(Mandatory)][string]$Name,
              [Parameter()][string]$Version,
              [Parameter()][switch]$AllowPrerelease,
              [Parameter()][switch]$PassThru
          )
          
          if ($Version) {
              $V = $Version.Split('-')
              $semVer = $V[0]
              $AllowPrerelease = ($AllowPrerelease -or ($null -ne $V[1]))
          }

          "Importing module $Name with version $semVer and AllowPrerelease $AllowPrerelease" | Write-Host

          # Check if module is already installed. Use the version parameter transformation
          $module = Get-Module -Name $Name -ListAvailable -ErrorAction SilentlyContinue 

          # If module not installed, install it
          if ($null -eq $module) {
              
              "Module not found, installing..." | Write-Host

              # Install module from PowershellGallery
              $installed = Install-Module -Name $Name -Force -PassThru -AllowPrerelease:$AllowPrerelease  -RequiredVersion:$Version -Verbose

              "Installed module $($installed.Name) with version $($installed.Version)" | Write-Host
              Write-output $installed

              # Confirm installed module
              Get-Module -Name $Name -ListAvailable-ErrorAction SilentlyContinue
              
          }
      
        }

        Import-MyModule -AllowPrerelease:$AllowPrerelease -Version:$Version -Name $Name 
