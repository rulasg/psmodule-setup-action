# This is a workflow to test your PowerShell module with TestingHelper
# https://github.com/rulasg/DemoPsModule/blob/main/.github/workflows/test_with_TestingHelper.yml

name: Test TestingHelper Setup Action

# Controls when the workflow will run
on:

  # Push and push-pr events trigger the workflow
  push:
      branches: [ main ]
  pull_request:
      branches: [ main ]

  # Allow to be called from other workflows
  workflow_call:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  # To run test we only need to read the repository
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  test-with-Version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run local action
        uses: ./
        with:
          Name: 'TestingHelper'
          Version: '4.0.1-preview'

      - name: Assert the test run
        shell: pwsh

        run: |
          $module = Get-Module -ListAvailable -Name TestingHelper

          if ($module -eq $null) { throw "Module TestingHelper not found" }

          if($module.count -ne 1) { throw "More than one module found"}

          if($module[0].Name -ne 'TestingHelper') { throw "Module name mismatch" }

          if($module[0].version.ToString() -ne '4.0.1') { throw "Version mismatch" }


  # # Disable this test to avoid future failure when TestingHelper last version is not 4.0.1
  # test-without-Version:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Run local action
  #       uses: ./
  #       with:
  #         Name: 'TestingHelper'

  #     - name: Assert the test run
  #       shell: pwsh
  #       run: |
  #         $module = Get-Module -ListAvailable -Name TestingHelper

  #         if ($module -eq $null) { throw "Module TestingHelper not found" }

  #         if($module.count -ne 1) { throw "More than one module found"}

  #         if($module[0].Name -ne 'TestingHelper') { throw "Module name mismatch" }

  #         if($module[0].version.ToString() -ne '4.0.1') { throw "Version mismatch" }

  # # Disable this test to avoid future failure when TestingHelper last release version is not 2.0
  # test-with-NoVersion-AllowPrerelease-false:
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Run local action
  #       uses: ./
  #       with:
  #         Name: 'TestingHelper'
  #         AllowPreReleaseVersions: 'false'

  #     - name: Assert the test run
  #       shell: pwsh
  #       run: |
  #         $module = Get-Module -ListAvailable -Name TestingHelper

  #         if ($module -eq $null) { throw "Module TestingHelper not found" }

  #         if($module.count -ne 1) { throw "More than one module found"}

  #         if($module[0].Name -ne 'TestingHelper') { throw "Module name mismatch" }

  #         if($module[0].version.ToString() -ne '2.0') { throw "Version mismatch" }
